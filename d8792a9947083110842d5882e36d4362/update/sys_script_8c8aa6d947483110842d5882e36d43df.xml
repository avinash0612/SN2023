<?xml version="1.0" encoding="UTF-8"?><record_update sys_domain="global" table="sys_script">
    <sys_script action="INSERT_OR_UPDATE">
        <abort_action>false</abort_action>
        <access>package_private</access>
        <action_delete>false</action_delete>
        <action_insert>true</action_insert>
        <action_query>false</action_query>
        <action_update>true</action_update>
        <active>false</active>
        <add_message>false</add_message>
        <advanced>true</advanced>
        <change_fields>false</change_fields>
        <client_callable>false</client_callable>
        <collection>x_27034_stocks_stocks</collection>
        <condition/>
        <description/>
        <execute_function>false</execute_function>
        <filter_condition/>
        <is_rest>false</is_rest>
        <message/>
        <name>getPrice</name>
        <order>100</order>
        <priority>100</priority>
        <rest_method/>
        <rest_method_text/>
        <rest_service/>
        <rest_service_text/>
        <rest_variables/>
        <role_conditions/>
        <script><![CDATA[(function executeRule(current, previous /*null when async*/ ) {

    // API url and parameters
    var apiUrl = 'https://financialmodelingprep.com/api/v3/quote/';
    var apiKey = '38a756289daffb0e571c309c71abfccd';
    var stockSymbol = ['IBM', 'NOW', 'CFG', 'MRNA'];
    // Create REST message  
    var restMessage = new sn_ws.RESTMessageV2();
    // Set headers
    restMessage.setRequestHeader('Content-Type', 'application/json');

    function mystocks(symbol) {
        // Set endpoint and parameters
        restMessage.setEndpoint(apiUrl + symbol + "?apikey=" + apiKey);
        restMessage.setHttpMethod('GET');
        // Execute request
        var response = restMessage.execute();
        var responseBody = response.getBody();
        // gs.print(responseBody);
        // Parse and print price
        var stockData = JSON.parse(responseBody);
        var price = stockData[0].price;
        gs.info(symbol + ' price: ' + price);
        //console.log("Done");
    }
    for (i in stockSymbol) {
        mystocks(stockSymbol[i]);
    }
    //gs.print(responseBody);

})(current, previous);]]></script>
        <sys_class_name>sys_script</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2023-07-14 17:56:35</sys_created_on>
        <sys_domain>global</sys_domain>
        <sys_domain_path>/</sys_domain_path>
        <sys_id>8c8aa6d947483110842d5882e36d43df</sys_id>
        <sys_mod_count>2</sys_mod_count>
        <sys_name>getPrice</sys_name>
        <sys_overrides/>
        <sys_package display_value="stocks" source="x_27034_stocks">d8792a9947083110842d5882e36d4362</sys_package>
        <sys_policy/>
        <sys_scope display_value="stocks">d8792a9947083110842d5882e36d4362</sys_scope>
        <sys_update_name>sys_script_8c8aa6d947483110842d5882e36d43df</sys_update_name>
        <sys_updated_by>avi</sys_updated_by>
        <sys_updated_on>2023-07-14 21:24:18</sys_updated_on>
        <template/>
        <when>async_always</when>
    </sys_script>
    <sys_translated_text action="delete_multiple" query="documentkey=8c8aa6d947483110842d5882e36d43df"/>
</record_update>
